---
title: "Assemble and Upload pre-processed data"
author: "Rainer M. Krug"
format: 
  html:
    toc: true
    toc-location: left
    code-overflow: scroll
    code-fold: true
    code-tools: true
    embed-resources: true
params:
  prepare_stage: [pre_processed, extracted]
  cores: 7
  data_dir: "/Volumes/LEEF/LEEF-1.archived.data/LEEF/3.archived.data"
  metadata_pre_processed: "~/git/LEEF/LEEF.metadata/metadata_pre_processed.zip"
  metadata_extracted: "~/git/LEEF/LEEF.metadata/metadata_extracted.zip"
  data_package_dir: "/Volumes/LEEF/LEEF-1 data packages"
  prepare: FALSE
  publish: FALSE
  sandbox: TRUE
---


## Introduction

This document assembles and publishes the pre-processed data and adds the metadata as defined in the function `metadata()` defined below.

Depending on the settings of `prepare` and `publish`, the data is prepared and / or published in the Zenodo Sandbox (`sandbox: TRUE`) or in the Zenodo repository. This should only be enabled if absolutely sure that everything is complete for publication. Data will be published as **Embargoed** until **WHICH TIME?**.

```{r}
#| label: setup

library(zenDep)
```

The following parameter will be used (explained later in the document):

```{r}
params
```
## Define bibliomteric metadata

This biblimetric metadata is not part of the data package, but the metdata of the data package as entered in Zenodo. 
It can be changed afterwards without generating a new DOI.
```{r}
#| label: define_metadata_bib

metadata_bib <- new_metadata_bib(
  title = "LEEF-1 experiment",
  description = "Description of the data",
  keywords = c("LEEZ-UZH", "LEEF-1"),
  community = "leef-uzh",
  upload_type = "dataset",
  authors = list(
    list( firstname = "Romana",    lastname = "Limberger",         affiliation = "University of Zurich", orcid = "0000-0002-9421-7520"),
    list( firstname = "Uriah",     lastname = "Daugaard",          affiliation = "University of Zurich", orcid = "0000-0003-4092-717X"),
    list( firstname = "Rainer M.", lastname = "Krug",              affiliation = "University of Zurich", orcid = "0000-0002-7490-0066"),
    list( firstname = "Owen L.",   lastname = "Petchey",           affiliation = "University of Zurich", orcid = "0000-0002-7724-1633")
  ),
  version = "1.0.0",
  language = "eng",
  access_right = "embargoed",
  embargo_date = as.Date("2030-01-13"),
  license = "CC-BY-SA-4.0",
  contributors = list(
    list( firstname = "Anubhav",   lastname = "Gupta",             affiliation = "University of Zurich", orcid = "0000-0001-7977-9747", type = "DataCollector"),
    list( firstname = "Debra",     lastname = "Zuppinger-Dingley", affiliation = "University of Zurich", orcid = "0000-0002-4573-0563", type = "DataCollector"),
    list( firstname = "Frank",     lastname = "Pennekamp",         affiliation = "University of Zurich", orcid = "",                    type = "DataCollector"),
    list( firstname = "Martina",   lastname = "Jelic",             affiliation = "University of Zurich", orcid = "",                    type = "DataCollector"),
    list( firstname = "Owen L.",   lastname = "Petchey",           affiliation = "University of Zurich", orcid = "0000-0002-7724-1633", type = "ProjectLeader"), # << types TODO
    list( firstname = "Rainer M.", lastname = "Krug",              affiliation = "University of Zurich", orcid = "0000-0002-7490-0066", type = c("DataCurator", "DataManager")),
    list( firstname = "Romana",    lastname = "Limberger",         affiliation = "University of Zurich", orcid = "0000-0002-9421-7520", type = "ProjectLeader"), # << types TODO
    list( firstname = "Sabina",    lastname = "Jyrkinen",          affiliation = "University of Zurich", orcid = "",                    type = "DataCollector"),
    list( firstname = "Seraina",   lastname = "Nohl",              affiliation = "University of Zurich", orcid = "",                    type = "DataCollector"),
    list( firstname = "Sofia J.",  lastname = "van Moorsel",       affiliation = "University of Zurich", orcid = "0000-0003-1947-8971", type = "DataCollector"),
    list( firstname = "Uriah",     lastname = "Daugaard",          affiliation = "University of Zurich", orcid = "0000-0003-4092-717X", type = "ProjectLeader"), # << types TODO
    list( firstname = "Yves",      lastname = "Choffat",           affiliation = "University of Zurich", orcid = "",                    type = "DataCollector"),
    list( firstname = "Zheng",     lastname = "Xue",               affiliation = "University of Zurich", orcid = "",                    type = "DataCollector")
  ),
  grants = "10.13039/501100001711::310030_188431" # This is the grant ID of the NRE grant of the NRF grant
)

```

which will result in the following bibliometric metadata for the deposits:

```{r}
metadata_bib
```

## Prepare data packages
Now the data packages will be prepared and named accordingly if `parms$prepare == TRUE`. The original data is located in ``r params$data_dir`` and saved in the directory ``r params$data_package_dir``. 
All timestamps in ``r params$data_dir`` will be processed using ``r params$cores`` cores as specified in the parameter `params$cores`.

If `parms$prepare == FALSE`, nothing will be done and the data packaged will be expected in the directory ``r params$data_package_dir``.
```{r}
#| label: prepare_data_packages

if (params$prepare) {
  leef_create_data_archives(
    to_dir = params$data_package_dir,
    data_dir = params$data_dir,
    stage = params$prepare_stage,
    cores = params$cores
  )
}  
```

## Check data deposits and publish to Zenodo
This step verifies the data deposits for the pre-processed data (metadata & data package) and the extracted data (metadata & data package) and their metadata,

### Determine Timestamps
The following timestamps will be deposited
```{r}
#| label: determine_timestamps

timestamps <- list.files(params$data_package_dir) |>
  (\(.) substr(., start = nchar(.)-11, stop = nchar(.) - 4))() |>
  unique()
timestamps
```

### Check pre-processed data packages

The pre-processed data packages are expected in the directory ``r params$data_package_dir``.
```{r}
#| label: check_pre_processed 
#| results: asis
#| 
OK <- TRUE

fe <- file.path(params$data_package_dir, paste0("data_pre_processed_", timestamps, ".zip")) |>
  file.exists()
if (all(fe)) {
  pp_missing <- character(0)
  cat("All pre_processed data packages availabable!")
} else {
  pp_missing <- paste0("data_pre_processed_", timestamps[!fe], ".zip")
  cat("**Missing pre_processed data packages!**\n\n")
  print(pp_missing)
  OK <- FALSE
}
rm(fe)
```

### Check extracted data packages

The extracted data packages are expected in the directory ``r params$data_package_dir``.
```{r}
#| label: check_extracted
#| results: asis

fe <- file.path(params$data_package_dir, paste0("data_extracted_", timestamps, ".zip")) |>
  file.exists()
if (all(fe)) {
  ex_missing <- character(0)
  cat("All pre-extracted data packages availabable!")
} else {
  ex_missing <- paste0("data_extracted_", timestamps[!fe], ".zip")
  cat("**ERROR: Missing extracted data packages!**\n\n")
  print(ex_missing)
  OK <- FALSE
}
rm(fe)
```

### Check pre-processed metadata

The pre-processed metadata id expected at ``r params$metadata_pre_processed``.
```{r}
#| label: check_metadata_pre_processed
#| results: asis

if (file.exists(params$metadata_pre_processed)) {
  cat("Pre_processed metadata package availabable!")
} else {
  cat("**ERROR: Missing Pre_processed metadata package!**")
  OK <- FALSE
}
```

### Check extracted metadata

The extracted metadata id expected at ``r params$metadata_extracted``.
```{r}
#| label: check_metadata_extracted
#| results: asis

if (file.exists(params$metadata_extracted)) {
  cat("extracted metadata package availabable!")
} else {
  cat("**ERROR: Missing extracted metadata package!**")
  OK <- FALSE
}
```

### Check if Zenodo token is set

Here we check if the environmental variable `ZENODO_PAT` is set, which is necessary for deposits on Zenodo.
```{r}
#| label: chech_ZENODO_PAT
#| results: asis

if (!is.null(zen4R:::zenodo_pat())){
  cat("Environmental variable `ZENODO_PAT` is set!")
} else {
  cat("**ERROR: Environmental variable `ZENODO_PAT` is not set!**")
  OK <- FALSE
}
```

```{r}
#| label: skip
#| results: asis
#| echo: false
#| eval: !expr '!OK'

cat("**All following processing is skipped as the input data or metadata is not complete or the environmental variable ZENODO_PAT is not set!**")
```

## Do the deposit

Here the data packages and the related metadata is uploads them to Zenodo (if `params$sandbox == TRUE` to the sandbox, the value is ``r params$sandbox``) using the bibliometric metadata, and DOIs are generated.
```{r}
#| label: deposit 
#| eval: !expr OK
pbmcapply::pbmclapply(
  X = timestamps,
  FUN = leef_deposit,
  token = zen4R:::zenodo_pat(),
  data_package_dir = params$data_package_dir,
  metadata_extracted = params$metadata_extracted,
  metadata_pre_processed = params$metadata$pre_processed,
  metadata_bib = metadata_bib,
  publish = params$publish,
  sandbox = params$sandbox #,
  # mc.cores = params$cores
)
```

